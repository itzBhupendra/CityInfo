using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;

namespace WpfMultiSelectComboBox
{
    public class MainViewModel : INotifyPropertyChanged
    {
        public ObservableCollection<ItemModel> Items { get; set; }
        public ObservableCollection<string> SelectedItems { get; set; }

        public MainViewModel()
        {
            Items = new ObservableCollection<ItemModel>
            {
                new ItemModel { Name = "Option 1", IsSelected = false },
                new ItemModel { Name = "Option 2", IsSelected = false },
                new ItemModel { Name = "Option 3", IsSelected = false },
                new ItemModel { Name = "Option 4", IsSelected = false }
            };
            SelectedItems = new ObservableCollection<string>();
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ItemModel : INotifyPropertyChanged
    {
        private bool _isSelected;
        public string Name { get; set; }

        public bool IsSelected
        {
            get => _isSelected;
            set
            {
                _isSelected = value;
                OnPropertyChanged(nameof(IsSelected));
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}





<Window x:Class="WpfMultiSelectComboBox.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="MultiSelect ComboBox" Height="200" Width="300">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>

    <Grid>
        <ComboBox Width="200" Height="30" IsEditable="True" StaysOpenOnEdit="True">
            <ComboBox.Template>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2" 
                                      IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" 
                                      ClickMode="Press">
                            <ContentPresenter Content="{Binding SelectedItems, Converter={StaticResource SelectedItemsConverter}}" />
                        </ToggleButton>
                        <Popup Name="Popup" Placement="Bottom" 
                               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                            <Border Background="White" BorderBrush="Gray" BorderThickness="1">
                                <ScrollViewer MaxHeight="200">
                                    <ItemsControl ItemsSource="{Binding Items}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <CheckBox Content="{Binding Name}" IsChecked="{Binding IsSelected, Mode=TwoWay}" />
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </ComboBox.Template>
        </ComboBox>
    </Grid>
</Window>





using System;
using System.Globalization;
using System.Linq;
using System.Windows.Data;

namespace WpfMultiSelectComboBox
{
    public class SelectedItemsConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var selectedItems = value as ObservableCollection<string>;
            return selectedItems != null && selectedItems.Any() ? string.Join(", ", selectedItems) : "Select Items";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}





<Window.Resources>
    <local:SelectedItemsConverter x:Key="SelectedItemsConverter"/>
</Window.Resources>
