using Microsoft.Extensions.Logging;
using System;
using System.Diagnostics;
using System.IO;

public class XmsTraceLoggerProvider : ILoggerProvider
{
    private readonly string _logFilePath;

    public XmsTraceLoggerProvider(string logFilePath)
    {
        _logFilePath = logFilePath;
    }

    public ILogger CreateLogger(string categoryName)
    {
        if (categoryName == "XMS")
        {
            var traceSource = new TraceSource("IBM.XMS");

            return new XmsTraceLogger(traceSource, _logFilePath);
        }

        return null;
    }

    public void Dispose()
    {
    }
}

public class XmsTraceLogger : ILogger
{
    private readonly TraceSource _traceSource;
    private readonly string _logFilePath;

    public XmsTraceLogger(TraceSource traceSource, string logFilePath)
    {
        _traceSource = traceSource;
        _logFilePath = logFilePath;
    }

    public IDisposable BeginScope<TState>(TState state)
    {
        return null;
    }

    public bool IsEnabled(LogLevel logLevel)
    {
        return true;
    }

    public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    {
        string message = formatter(state, exception);

        // Append log message to file
        File.AppendAllText(_logFilePath, $"{DateTime.Now} [{logLevel}] - {message}{Environment.NewLine}");

        // Write log message to TraceSource
        _traceSource.TraceEvent(GetTraceEventType(logLevel), 0, message);
    }

    private TraceEventType GetTraceEventType(LogLevel logLevel)
    {
        // Map log level to trace event type
        switch (logLevel)
        {
            case LogLevel.Trace:
                return TraceEventType.Verbose;
            case LogLevel.Debug:
                return TraceEventType.Information;
            case LogLevel.Information:
                return TraceEventType.Information;
            case LogLevel.Warning:
                return TraceEventType.Warning;
            case LogLevel.Error:
                return TraceEventType.Error;
            case LogLevel.Critical:
                return TraceEventType.Critical;
            default:
                return TraceEventType.Verbose;
        }
    }
}
