  public List<List<T>> ExecuteStoredProcedure<T>(string storedProcedureName, object parameters = null)
    {
        using (var connection = new SqlConnection(_connectionString))
        {
            connection.Open();

            var result = connection.QueryMultiple(storedProcedureName, parameters, commandType: CommandType.StoredProcedure);

            var resultSetCount = result.Read<int>().FirstOrDefault();
            var resultList = new List<List<T>>(resultSetCount);

            for (int i = 0; i < resultSetCount; i++)
            {
                var resultSet = result.Read<T>().ToList();
                resultList.Add(resultSet);
            }

            return resultList;
        }
    }

public IEnumerable<T> ExecuteStoredProcedure<T>(string storedProcedureName, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.Query<T>(storedProcedureName, parameters, commandType: CommandType.StoredProcedure);
        }
    }

    public int ExecuteInsert(string sql, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.Execute(sql, parameters);
        }
    }

    public int ExecuteUpdate(string sql, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.Execute(sql, parameters);
        }
    }

    public int ExecuteDelete(string sql, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.Execute(sql, parameters);
        }
    }


 public void ExecuteNonQueryWithTransaction(string query, object parameters = null)
    {
        using (var connection = new SqlConnection(_connectionString))
        {
            connection.Open();

            using (var transaction = connection.BeginTransaction())
            {
                try
                {
                    connection.Execute(query, parameters, transaction: transaction);

                    // Commit the transaction if everything is successful
                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    // Handle any exceptions and roll back the transaction
                    Console.WriteLine($"Error: {ex.Message}");
                    transaction.Rollback();
                }
            }
        }
		
		  public IEnumerable<T> Query<T>(string sql, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.Query<T>(sql, parameters);
        }
    }

    public T QueryFirst<T>(string sql, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.QueryFirst<T>(sql, parameters);
        }
    }

    public T QueryFirstOrDefault<T>(string sql, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.QueryFirstOrDefault<T>(sql, parameters);
        }
    }

    public T QuerySingle<T>(string sql, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.QuerySingle<T>(sql, parameters);
        }
    }

    public T QuerySingleOrDefault<T>(string sql, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.QuerySingleOrDefault<T>(sql, parameters);
        }
    }

    public SqlMapper.GridReader QueryMultiple(string sql, object parameters = null)
    {
        using (IDbConnection dbConnection = new SqlConnection(connectionString))
        {
            dbConnection.Open();
            return dbConnection.QueryMultiple(sql, parameters);
        }
    }
