import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import axiosInstance from '../axiosInstance';

export interface LogEntry {  // Export the LogEntry interface
  dateTime: string;
  logLevel: string;
  correlationId: string;
  message: string;
}

interface LogsState {
  logs: LogEntry[];
  filteredLogs: LogEntry[];
  loading: boolean;
  error: string | null;
}

const initialState: LogsState = {
  logs: [],
  filteredLogs: [],
  loading: false,
  error: null,
};

export const fetchLogs = createAsyncThunk('logs/fetchLogs', async () => {
  const response = await axiosInstance.get('/logs');
  return response.data;
});

const logsSlice = createSlice({
  name: 'logs',
  initialState,
  reducers: {
    filterLogs: (state, action: PayloadAction<string>) => {
      const query = action.payload.toLowerCase();
      state.filteredLogs = state.logs.filter(
        (log) =>
          log.correlationId.toLowerCase().includes(query) ||
          log.message.toLowerCase().includes(query) ||
          log.logLevel.toLowerCase().includes(query)
      );
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchLogs.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchLogs.fulfilled, (state, action: PayloadAction<LogEntry[]>) => {
        state.logs = action.payload;
        state.filteredLogs = action.payload;
        state.loading = false;
      })
      .addCase(fetchLogs.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Something went wrong';
      });
  },
});

export const { filterLogs } = logsSlice.actions;

export default logsSlice.reducer;
