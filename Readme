public class IntegrationTests
{
    private readonly TestServer _server;
    private readonly HttpClient _client;

    public IntegrationTests()
    {
        // Set up test server with middleware and services
        var builder = WebApplication.CreateBuilder();
        builder.Services.AddSingleton<IMyService>(new Mock<IMyService>().Object);
        builder.Services.AddControllers();
        builder.Services.AddMvc();

        builder.Services.Configure<MvcOptions>(options =>
        {
            options.Filters.Add(new ApiExceptionMiddleware());
        });

        builder.Services.AddEndpointsApiExplorer();
        builder.Services.AddSwaggerGen();

        var app = builder.Build();
        app.UseRouting();
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });

        _server = new TestServer(new TestServerOptions { ApplicationBuilder = app });
        _client = _server.CreateClient();
    }

    [Fact]
    public async Task MyAction_ReturnsInternalServerError_WhenServiceThrowsException()
    {
        // Arrange
        var mockService = _server.Services.GetRequiredService<IMyService>();
        mockService.Setup(s => s.SomeMethod()).Throws(new Exception("Something went wrong"));

        // Act
        var response = await _client.GetAsync("/api/mycontroller/myaction");

        // Assert
        Assert.Equal(HttpStatusCode.InternalServerError, response.StatusCode);
        var content = await response.Content.ReadAsStringAsync();
        Assert.Contains("Something went wrong", content);
    }
}
