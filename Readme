public class TestStartup
{
    public void ConfigureServices(IServiceCollection services)
    {
        // Configure services for testing
        services.AddSingleton<IMyService>(new Mock<IMyService>().Object);
        services.AddControllers();
        services.AddMvc();

        // Configure middleware for testing
        services.Configure<MvcOptions>(options =>
        {
            options.Filters.Add(new ApiExceptionMiddleware());
        });

        // Configure endpoints for testing
        services.AddEndpointsApiExplorer();
        services.AddSwaggerGen();
    }

    public void Configure(IApplicationBuilder app)
    {
        // Configure request pipeline for testing
        app.UseRouting();
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });
    }
}

public class IntegrationTests
{
    private readonly TestServer _server;
    private readonly HttpClient _client;

    public IntegrationTests()
    {
        // Set up test server with custom TestStartup
        _server = new TestServer(new WebApplicationFactory<TestStartup>().CreateDefaultBuilder());
        _client = _server.CreateClient();
    }

    [Fact]
    public async Task MyAction_ReturnsInternalServerError_WhenServiceThrowsException()
    {
        // Arrange
        var mockService = _server.Services.GetRequiredService<IMyService>();
        mockService.Setup(s => s.SomeMethod()).Throws(new Exception("Something went wrong"));

        // Act
        var response = await _client.GetAsync("/api/mycontroller/myaction");

        // Assert
        Assert.Equal(HttpStatusCode.InternalServerError, response.StatusCode);
        var content = await response.Content.ReadAsStringAsync();
        Assert.Contains("Something went wrong", content);
    }
}
