[Route("api/health")]
[ApiController]
public class HealthController : ControllerBase
{
    [HttpGet("metrics")]
    public IActionResult GetMetrics()
    {
        var metrics = new
        {
            RequestsPerMinute = RequestMonitoringMiddleware.GetRequestsPerMinute(),
            OpenHandles = Process.GetCurrentProcess().HandleCount,
            MemoryUsage = GC.GetTotalMemory(false) / (1024 * 1024)  // Memory in MB
        };
        return Ok(metrics);
    }
}


public class MemoryMonitoringMiddleware
{
    private static readonly List<long> _memorySnapshots = new List<long>();
    private readonly RequestDelegate _next;

    public MemoryMonitoringMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        // Take a memory snapshot
        _memorySnapshots.Add(GC.GetTotalMemory(false));
        
        // Keep the list manageable by removing oldest entries
        if (_memorySnapshots.Count > 100) 
        {
            _memorySnapshots.RemoveAt(0);
        }
        
        await _next(context);
    }

    public static bool IsMemoryLeaking()
    {
        if (_memorySnapshots.Count < 10) return false;
        
        // Analyze trend: e.g., check if last 10 snapshots show increasing usage
        for (int i = _memorySnapshots.Count - 10; i < _memorySnapshots.Count - 1; i++)
        {
            if (_memorySnapshots[i] > _memorySnapshots[i + 1])
            {
                return false; // No leak detected in this sequence
            }
        }
        return true; // Possible leak detected
    }
}
