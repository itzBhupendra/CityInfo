public class LogEntry
    {
        public DateTime DateTime { get; set; }
        public string LogLevel { get; set; }
        public string CorrelationId { get; set; }
        public string Message { get; set; }
    }



 var logs = new List<LogEntry>
            {
                new LogEntry { DateTime = DateTime.Now.AddMinutes(-10), LogLevel = "Warning", CorrelationId = "123", Message = "Unable to resolve host" },
                new LogEntry { DateTime = DateTime.Now.AddMinutes(-20), LogLevel = "Error", CorrelationId = "456", Message = "TCP connection failed" },
                new LogEntry { DateTime = DateTime.Now.AddMinutes(-30), LogLevel = "Error", CorrelationId = "789", Message = "soapUI-specific Error" },
                new LogEntry { DateTime = DateTime.Now.AddMinutes(-40), LogLevel = "Error", CorrelationId = "101", Message = "HTTP Error" },
                new LogEntry { DateTime = DateTime.Now.AddMinutes(-50), LogLevel = "Error", CorrelationId = "112", Message = "Service Execution Error" }
            };






import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import axiosInstance from '../axiosInstance';

interface LogEntry {
  dateTime: string;
  logLevel: string;
  correlationId: string;
  message: string;
}

interface LogsState {
  logs: LogEntry[];
  filteredLogs: LogEntry[];
  loading: boolean;
  error: string | null;
}

const initialState: LogsState = {
  logs: [],
  filteredLogs: [],
  loading: false,
  error: null,
};

export const fetchLogs = createAsyncThunk('logs/fetchLogs', async () => {
  const response = await axiosInstance.get('/logs');
  return response.data;
});

const logsSlice = createSlice({
  name: 'logs',
  initialState,
  reducers: {
    filterLogs: (state, action: PayloadAction<string>) => {
      const query = action.payload.toLowerCase();
      state.filteredLogs = state.logs.filter(
        (log) =>
          log.correlationId.toLowerCase().includes(query) ||
          log.message.toLowerCase().includes(query) ||
          log.logLevel.toLowerCase().includes(query)
      );
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchLogs.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchLogs.fulfilled, (state, action: PayloadAction<LogEntry[]>) => {
        state.logs = action.payload;
        state.filteredLogs = action.payload;
        state.loading = false;
      })
      .addCase(fetchLogs.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Something went wrong';
      });
  },
});

export const { filterLogs } = logsSlice.actions;

export default logsSlice.reducer;






vimport React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchLogs } from './slices/logsSlice';
import { RootState, AppDispatch } from './store/store'; // Import AppDispatch and RootState

const LogDashboard: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>(); // Type the dispatch function
  const logs = useSelector((state: RootState) => state.logs.logs);
  const loading = useSelector((state: RootState) => state.logs.loading);
  const error = useSelector((state: RootState) => state.logs.error);

  useEffect(() => {
    dispatch(fetchLogs());
  }, [dispatch]);

  return (
    <div>
      <h1>Log Dashboard</h1>
      {loading && <p>Loading...</p>}
      {error && <p>Error: {error}</p>}
      <ul>
        {logs.map((log, index) => (
          <li key={index}>
            {log.dateTime} - {log.logLevel} - {log.correlationId} - {log.message}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default LogDashboard;
