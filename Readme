using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureLogging((context, logging) =>
            {
                logging.ClearProviders(); // Clear existing logging providers
                logging.AddConsole(); // Add console logger as an example

                // Register the Func<string, LogLevel, bool> dependency
                logging.Services.AddSingleton<Func<string, LogLevel, bool>>(provider =>
                {
                    var configuration = provider.GetRequiredService<IConfiguration>(); // If you are using IConfiguration for filtering

                    return (category, logLevel) =>
                    {
                        // Implement your filtering logic here
                        // For example, you can read filtering criteria from configuration and apply them here
                        return true; // Return true for all log messages for now
                    };
                });

                logging.AddCustomProvider(); // Add custom logger provider
            })
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.UseStartup<Startup>(); // Replace Startup with your actual startup class if using ASP.NET Core
            });
}
