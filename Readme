using Microsoft.AspNetCore.Http;
using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;

public class RequestResponseLoggingMiddleware
{
    private readonly RequestDelegate _next;

    public RequestResponseLoggingMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        // Capture the request
        var requestBodyStream = new MemoryStream();
        var originalRequestBody = context.Request.Body;
        await context.Request.Body.CopyToAsync(requestBodyStream);
        requestBodyStream.Seek(0, SeekOrigin.Begin);
        var requestBodyText = await new StreamReader(requestBodyStream).ReadToEndAsync();
        context.Request.Body = originalRequestBody;

        // Capture the response
        var originalResponseBody = context.Response.Body;
        var responseBodyStream = new MemoryStream();
        context.Response.Body = responseBodyStream;

        await _next(context);

        responseBodyStream.Seek(0, SeekOrigin.Begin);
        var responseBodyText = await new StreamReader(responseBodyStream).ReadToEndAsync();
        responseBodyStream.Seek(0, SeekOrigin.Begin);

        // Log request and response
        LogToDatabase(context.Request.Method, context.Request.Path, requestBodyText, context.Response.StatusCode, responseBodyText);

        // Copy the response back to the original stream
        await responseBodyStream.CopyToAsync(originalResponseBody);
    }

    private void LogToDatabase(string method, string path, string request, int statusCode, string response)
    {
        // Log to database here
        Console.WriteLine($"Logged request: {method} {path} - Status: {statusCode}");
        Console.WriteLine($"Request Body: {request}");
        Console.WriteLine($"Response Body: {response}");
    }
}
