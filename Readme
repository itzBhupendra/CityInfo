using System;
using System.ServiceModel;
using System.Windows.Forms;

namespace WCFClientAppWinForms
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void btnConnect_Click(object sender, EventArgs e)
        {
            try
            {
                // Retrieve values from the textboxes
                string serviceUrl = txtServiceUrl.Text;
                string spn = txtSPN.Text;

                // Create a binding to match the one in app.config
                var binding = new NetTcpBinding(SecurityMode.Transport)
                {
                    Security =
                    {
                        Transport = { ClientCredentialType = TcpClientCredentialType.Windows }
                    }
                };

                // Set the address of the service
                var address = new EndpointAddress(serviceUrl);

                // Create a generic channel factory with a placeholder for the service interface
                var channelFactory = new ChannelFactory<object>(binding, address);

                // Set the credentials to use Windows authentication
                channelFactory.Credentials.Windows.ClientCredential = System.Net.CredentialCache.DefaultNetworkCredentials;

                // Set the service principal name (SPN) as the service's identity
                channelFactory.Credentials.Windows.AllowedImpersonationLevel = System.Security.Principal.TokenImpersonationLevel.Impersonation;

                // Create a generic proxy to the service
                object client = channelFactory.CreateChannel();

                // Dynamically invoke the method (assuming the method name is 'GetData' and takes an integer)
                var methodInfo = client.GetType().GetMethod("GetData");
                if (methodInfo != null)
                {
                    // Invoke 'GetData' with a parameter (e.g., 123)
                    object[] parameters = new object[] { 123 };
                    string result = (string)methodInfo.Invoke(client, parameters);

                    // Display the result in the label
                    lblResult.Text = "Service Response: " + result;
                }
                else
                {
                    lblResult.Text = "Method 'GetData' not found.";
                }

                // Close the channel
                ((IClientChannel)client).Close();
            }
            catch (Exception ex)
            {
                lblResult.Text = "Error: " + ex.Message;
            }
        }
    }
}
