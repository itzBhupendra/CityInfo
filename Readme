using System;
using System.Linq;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

public class CertificateService
{
    private readonly string _certificateName;

    public CertificateService(string certificateName)
    {
        _certificateName = certificateName ?? throw new ArgumentNullException(nameof(certificateName));
    }

    public X509Certificate2 GetLatestCertificate()
    {
        using (var store = new X509Store(StoreName.My, StoreLocation.LocalMachine))
        {
            store.Open(OpenFlags.ReadOnly);

            var certificate = store.Certificates
                .Find(X509FindType.FindBySubjectName, _certificateName, validOnly: true)
                .OfType<X509Certificate2>()
                .OrderByDescending(cert => cert.NotBefore) // Get the latest by installation date
                .FirstOrDefault();

            if (certificate == null)
            {
                throw new Exception($"Certificate '{_certificateName}' not found.");
            }

            return certificate;
        }
    }

    public string GetPrivateKeyAsXml()
    {
        var certificate = GetLatestCertificate();

        if (!certificate.HasPrivateKey)
        {
            throw new Exception("The certificate does not have a private key.");
        }

        // Export the private key as XML
        var rsa = certificate.GetRSAPrivateKey() as RSACryptoServiceProvider;
        if (rsa == null)
        {
            throw new NotSupportedException("The private key is not exportable as XML. It may use CNG.");
        }

        return rsa.ToXmlString(includePrivateParameters: true);
    }
}





var builder = WebApplication.CreateBuilder(args);

// Register the CertificateService
builder.Services.AddSingleton(sp => new CertificateService("YourCertificateName"));

// Configure HttpClient with the certificate (optional, if using HttpClient)
builder.Services.AddHttpClient("ClientWithCertificate")
    .ConfigurePrimaryHttpMessageHandler(sp =>
    {
        var certificateService = sp.GetRequiredService<CertificateService>();
        var handler = new HttpClientHandler();

        // Attach the certificate
        handler.ClientCertificates.Add(certificateService.GetLatestCertificate());

        return handler;
    });

var app = builder.Build();
app.MapGet("/", () => "Hello World!");
app.Run();
