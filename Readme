// Unit Test
public class MyControllerTests
{
    [Fact]
    public async Task MyAction_Exception_HandledByMiddleware()
    {
        // Arrange
        var mockService = new Mock<IMyService>();
        mockService.Setup(x => x.DoSomething()).Throws<Exception>();

        var serviceProvider = new ServiceCollection()
            .AddTransient<IMyService>(_ => mockService.Object)
            .BuildServiceProvider();

        var httpContext = new DefaultHttpContext();
        httpContext.RequestServices = serviceProvider;

        var middleware = new TestExceptionMiddleware(next: (innerHttpContext) => Task.CompletedTask);

        // Create an instance of your controller and invoke the action method
        var controller = new MyController(mockService.Object);
        
        // Act
        await Assert.ThrowsAsync<Exception>(() => controller.MyAction());

        // Invoke the exception middleware with the caught exception
        await middleware.InvokeAsync(httpContext, exception: new Exception());

        // Assert
        Assert.Equal(500, httpContext.Response.StatusCode);
        var responseText = await new StreamReader(httpContext.Response.Body).ReadToEndAsync();
        Assert.Equal("An error occurred", responseText);
    }
}
