using System;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using System.Linq;

public class GenericHttpClient : IGenericHttpClient
{
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly IHttpContextAccessor _httpContextAccessor;

    public GenericHttpClient(IHttpClientFactory httpClientFactory, IHttpContextAccessor httpContextAccessor)
    {
        _httpClientFactory = httpClientFactory;
        _httpContextAccessor = httpContextAccessor;
    }

    public async Task<string> GetAsync(string baseUrl, string endpoint)
    {
        var client = _httpClientFactory.CreateClient();

        // Set the base address
        client.BaseAddress = new Uri(baseUrl);

        // Get the UserId from the current HTTP context
        var userId = _httpContextAccessor.HttpContext?.Request.Headers["UserId"].FirstOrDefault();
        if (!string.IsNullOrEmpty(userId))
        {
            if (client.DefaultRequestHeaders.Contains("UserId"))
            {
                client.DefaultRequestHeaders.Remove("UserId");
            }
            client.DefaultRequestHeaders.Add("UserId", userId);
        }

        return await RetryPolicy(async () =>
        {
            var response = await client.GetAsync(endpoint);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadAsStringAsync();
        }, 3, TimeSpan.FromSeconds(2));
    }

    private async Task<T> RetryPolicy<T>(Func<Task<T>> action, int retryCount, TimeSpan delay)
    {
        for (int i = 0; i < retryCount; i++)
        {
            try
            {
                return await action();
            }
            catch (HttpRequestException) when (i < retryCount - 1)
            {
                await Task.Delay(delay);
            }
        }
        // Re-throw the last exception if all retries fail
        return await action();
    }
}
