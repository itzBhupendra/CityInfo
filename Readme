using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;

public class JsonRequestResponseLoggingMiddleware
{
    private readonly RequestDelegate _next;

    public JsonRequestResponseLoggingMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        // Capture the request
        var requestBody = await FormatRequest(context.Request);

        // Capture the response
        var originalBodyStream = context.Response.Body;
        using (var responseBody = new MemoryStream())
        {
            context.Response.Body = responseBody;

            await _next(context);

            // Capture the response
            var responseBodyText = await FormatResponse(context.Response);

            // Log request and response
            LogToDatabase(context.Request.Method, context.Request.Path, requestBody, context.Response.StatusCode, responseBodyText);

            // Copy the response back to the original stream
            await responseBody.CopyToAsync(originalBodyStream);
        }
    }

    private async Task<string> FormatRequest(HttpRequest request)
    {
        request.EnableBuffering();
        var body = await new StreamReader(request.Body).ReadToEndAsync();
        request.Body.Position = 0;

        return body;
    }

    private async Task<string> FormatResponse(HttpResponse response)
    {
        response.Body.Seek(0, SeekOrigin.Begin);
        var body = await new StreamReader(response.Body).ReadToEndAsync();
        response.Body.Seek(0, SeekOrigin.Begin);

        return body;
    }

    private void LogToDatabase(string method, string path, string request, int statusCode, string response)
    {
        // Log to database here
        Console.WriteLine($"Logged request: {method} {path} - Status: {statusCode}");
        Console.WriteLine($"Request Body: {request}");
        Console.WriteLine($"Response Body: {response}");
    }
}
