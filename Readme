using Microsoft.Extensions.Logging;
using System;
using System.IO;

public class ServiceLoggerProvider : ILoggerProvider
{
    private readonly LogLevel _logLevel;

    public ServiceLoggerProvider(LogLevel logLevel)
    {
        _logLevel = logLevel;
    }

    public ILogger CreateLogger(string categoryName)
    {
        string logFilePath = $"logs/log_{categoryName}_{Guid.NewGuid()}.txt"; // Generate a unique log file path
        return new ServiceLogger(logFilePath, _logLevel);
    }

    public void Dispose() { }
}

public class ServiceLogger : ILogger
{
    private readonly string _logFilePath;
    private readonly LogLevel _logLevel;
    private readonly object _lock = new object();

    public ServiceLogger(string logFilePath, LogLevel logLevel)
    {
        _logFilePath = logFilePath;
        _logLevel = logLevel;
    }

    public IDisposable BeginScope<TState>(TState state) => null;

    public bool IsEnabled(LogLevel logLevel) => logLevel >= _logLevel;

    public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    {
        if (!IsEnabled(logLevel))
            return;

        var logEntry = new LogEntry
        {
            Timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
            LogLevel = logLevel.ToString(),
            Message = formatter(state, exception),
            Exception = exception?.ToString()
        };

        var logMessage = FormatLogMessage(logEntry);

        lock (_lock)
        {
            File.AppendAllText(_logFilePath, logMessage);
        }
    }

    private string FormatLogMessage(LogEntry logEntry)
    {
        return $"[{logEntry.Timestamp}] [{logEntry.LogLevel}]: {logEntry.Message}{Environment.NewLine}" +
               (logEntry.Exception != null ? $"Exception: {logEntry.Exception}{Environment.NewLine}" : "");
    }

    private class LogEntry
    {
        public string Timestamp { get; set; }
        public string LogLevel { get; set; }
        public string Message { get; set; }
        public string Exception { get; set; }
    }
}
