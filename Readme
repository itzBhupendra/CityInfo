import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchLogs } from './slices/logsSlice';
import { RootState, AppDispatch } from './store/store';
import {
  Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableSortLabel, Paper
} from '@mui/material';
import { LogEntry } from './slices/logsSlice'; // Import the LogEntry interface

type Order = 'asc' | 'desc';

interface HeadCell {
  id: keyof LogEntry;
  label: string;
}

const headCells: HeadCell[] = [
  { id: 'dateTime', label: 'Date Time' },
  { id: 'logLevel', label: 'Log Level' },
  { id: 'correlationId', label: 'Correlation ID' },
  { id: 'message', label: 'Message' },
];

const LogTable: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const logs = useSelector((state: RootState) => state.logs.logs);
  const loading = useSelector((state: RootState) => state.logs.loading);
  const error = useSelector((state: RootState) => state.logs.error);

  const [order, setOrder] = useState<Order>('asc');
  const [orderBy, setOrderBy] = useState<keyof LogEntry>('dateTime');

  useEffect(() => {
    dispatch(fetchLogs());
  }, [dispatch]);

  const handleRequestSort = (property: keyof LogEntry) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const sortedLogs = [...logs].sort((a, b) => {
    if (orderBy === 'dateTime') {
      return order === 'asc'
        ? new Date(a.dateTime).getTime() - new Date(b.dateTime).getTime()
        : new Date(b.dateTime).getTime() - new Date(a.dateTime).getTime();
    } else {
      return order === 'asc'
        ? (a[orderBy] < b[orderBy] ? -1 : 1)
        : (a[orderBy] > b[orderBy] ? -1 : 1);
    }
  });

  return (
    <TableContainer component={Paper}>
      <h1>Log Dashboard</h1>
      {loading && <p>Loading...</p>}
      {error && <p>Error: {error}</p>}
      <Table>
        <TableHead>
          <TableRow>
            {headCells.map((headCell) => (
              <TableCell key={headCell.id}>
                <TableSortLabel
                  active={orderBy === headCell.id}
                  direction={orderBy === headCell.id ? order : 'asc'}
                  onClick={() => handleRequestSort(headCell.id)}
                >
                  {headCell.label}
                </TableSortLabel>
              </TableCell>
            ))}
          </TableRow>
        </TableHead>
        <TableBody>
          {sortedLogs.map((log, index) => (
            <TableRow key={index}>
              <TableCell>{log.dateTime}</TableCell>
              <TableCell>{log.logLevel}</TableCell>
              <TableCell>{log.correlationId}</TableCell>
              <TableCell>{log.message}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default LogTable;
