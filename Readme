using System;
using System.Collections.Concurrent;
using System.IO;
using System.Threading;

class Program
{
    static ConcurrentQueue<string> messageQueue = new ConcurrentQueue<string>();
    static bool isWriting = false;

    static void Main()
    {
        // Start the dedicated thread for writing to the file
        Thread writingThread = new Thread(WriteToFile);
        writingThread.Start();

        // Example threads enqueuing messages to write to the file
        Thread thread1 = new Thread(() => EnqueueMessage("Thread 1 is writing."));
        Thread thread2 = new Thread(() => EnqueueMessage("Thread 2 is writing."));

        thread1.Start();
        thread2.Start();
    }

    static void EnqueueMessage(string message)
    {
        messageQueue.Enqueue(message);
    }

    static void WriteToFile()
    {
        string filePath = "example.txt";

        while (true)
        {
            if (!isWriting && messageQueue.TryDequeue(out string message))
            {
                try
                {
                    isWriting = true;

                    using (StreamWriter writer = File.AppendText(filePath))
                    {
                        writer.WriteLine(message);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception: {ex.Message}");
                }
                finally
                {
                    isWriting = false;
                }
            }
            // Add a small delay to avoid busy-waiting
            Thread.Sleep(10);
        }
    }
}
