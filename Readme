using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

class Program
{
    static void Main(string[] args)
    {
        CreateWebHostBuilder(args).Build().Run();
    }

    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        WebHost.CreateDefaultBuilder(args)
            .ConfigureServices(services =>
            {
                services.AddHttpClient();
            })
            .Configure(app =>
            {
                app.UseRouting();

                app.Use(async (context, next) =>
                {
                    // Retrieve Correlation ID from HTTP header
                    string correlationId = context.Request.Headers["Correlation-ID"];
                    if (string.IsNullOrEmpty(correlationId))
                    {
                        correlationId = Guid.NewGuid().ToString();
                        context.Request.Headers.Add("Correlation-ID", correlationId);
                    }

                    // Log Correlation ID
                    Console.WriteLine($"Service 2 received request with Correlation ID: {correlationId}");

                    await next();
                });

                app.UseEndpoints(endpoints =>
                {
                    endpoints.MapGet("/", async context =>
                    {
                        await context.Response.WriteAsync("Service 2 endpoint reached successfully");
                    });
                });
            });

    public class CorrelationIdHandler : DelegatingHandler
    {
        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
        {
            string correlationId = request.Headers.GetValues("Correlation-ID").FirstOrDefault();

            if (string.IsNullOrEmpty(correlationId))
            {
                correlationId = Guid.NewGuid().ToString();
                request.Headers.Add("Correlation-ID", correlationId);
            }

            Console.WriteLine($"Correlation ID added to outgoing request to Service 3: {correlationId}");

            return await base.SendAsync(request, cancellationToken);
        }
    }
}
