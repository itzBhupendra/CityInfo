using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;

public static class LoggerExtensions
{
    public static void LogFilteredJson(this ILogger logger, string jsonString, EventId eventId)
    {
        var json = JObject.Parse(jsonString);
        RemoveSensitiveData(json, SensitiveDataKeys.Keys);
        logger.LogInformation(eventId, json.ToString());
    }

    private static void RemoveSensitiveData(JObject json, HashSet<string> sensitiveKeys)
    {
        var propertiesToMask = new List<JProperty>();

        // Collect properties to mask to avoid modifying the collection while iterating
        foreach (var property in json.Properties())
        {
            if (sensitiveKeys.Contains(property.Name))
            {
                propertiesToMask.Add(property);
            }
            else if (property.Value is JObject nestedObject)
            {
                RemoveSensitiveData(nestedObject, sensitiveKeys);
            }
        }

        // Mask the collected properties
        foreach (var property in propertiesToMask)
        {
            property.Value = "****"; // Mask the sensitive data
        }
    }
}
