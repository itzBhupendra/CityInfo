[HttpGet("distinct-correlation-ids")]
public async Task<IActionResult> GetDistinctCorrelationIds()
{
    try
    {
        string basePath = "path/to/log/folder"; // Base path for the logs.
        var distinctCorrelationIds = new HashSet<string>();

        foreach (var file in Directory.GetFiles(basePath, "*.log", SearchOption.AllDirectories))
        {
            using var streamReader = new StreamReader(file);
            string line;

            while ((line = await streamReader.ReadLineAsync()) != null)
            {
                // Match log format: [Datetime] [LogLevel] [CorrelationId] : Message
                var match = Regex.Match(line, @"\[(.*?)\] \[(.*?)\] \[(.*?)\] : (.*)");
                if (match.Success)
                {
                    var logLevel = match.Groups[2].Value;           // Log level
                    var correlationId = match.Groups[3].Value;     // Correlation ID
                    var message = match.Groups[4].Value;           // Message

                    // Check if LogLevel is Information and Message starts with "SYSTEM_EXCEPTION"
                    if (logLevel.Equals("Information", StringComparison.OrdinalIgnoreCase) 
                        && message.StartsWith("SYSTEM_EXCEPTION"))
                    {
                        distinctCorrelationIds.Add(correlationId);
                    }
                }
            }
        }

        return Ok(distinctCorrelationIds);
    }
    catch (Exception ex)
    {
        return StatusCode(500, $"An error occurred: {ex.Message}");
    }
}


using System.Collections.ObjectModel;
using System.Net.Http;
using System.Net.Http.Json;
using System.Windows.Input;

public class MainViewModel : INotifyPropertyChanged
{
    private readonly HttpClient _httpClient = new();
    private string _selectedCorrelationId;

    public ObservableCollection<string> CorrelationIds { get; } = new();
    public ICommand LoadCorrelationIdsCommand { get; }
    public ICommand ViewDetailsCommand { get; }

    public string SelectedCorrelationId
    {
        get => _selectedCorrelationId;
        set
        {
            _selectedCorrelationId = value;
            OnPropertyChanged();
        }
    }

    public MainViewModel()
    {
        LoadCorrelationIdsCommand = new RelayCommand(async () => await LoadCorrelationIds());
        ViewDetailsCommand = new RelayCommand(() => ViewDetails(), () => !string.IsNullOrEmpty(SelectedCorrelationId));
    }

    private async Task LoadCorrelationIds()
    {
        CorrelationIds.Clear();

        try
        {
            var response = await _httpClient.GetFromJsonAsync<List<string>>("http://your-api-endpoint/distinct-correlation-ids");
            if (response != null)
            {
                foreach (var id in response)
                {
                    CorrelationIds.Add(id);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle the error.
        }
    }

    private void ViewDetails()
    {
        if (!string.IsNullOrEmpty(SelectedCorrelationId))
        {
            var detailViewModel = new DetailViewModel(SelectedCorrelationId);
            var detailPage = new DetailPage { DataContext = detailViewModel };
            detailPage.Show();
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}







using System.Collections.ObjectModel;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

public class DetailViewModel : INotifyPropertyChanged
{
    private readonly HttpClient _httpClient = new();
    private string _correlationId;

    public ObservableCollection<LogEntry> LogEntries { get; } = new();

    public DetailViewModel(string correlationId)
    {
        _correlationId = correlationId;
        LoadLogEntries();
    }

    private async void LoadLogEntries()
    {
        try
        {
            var response = await _httpClient.GetFromJsonAsync<ApiResponse>($"http://your-api-endpoint/logs/{_correlationId}");
            if (response != null && response.IsSuccess)
            {
                foreach (var log in response.Result)
                {
                    LogEntries.Add(log);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle error.
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}













<Window x:Class="LogSearchApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Log Search App" Height="450" Width="800">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- Left Panel -->
        <StackPanel Grid.Column="0" Margin="0,0,10,0">
            <TextBlock Text="Correlation IDs" FontWeight="Bold" Margin="0,0,0,10"/>
            <ListBox ItemsSource="{Binding CorrelationIds}" SelectedItem="{Binding SelectedCorrelationId}"/>
            <Button Content="View Details" Command="{Binding ViewDetailsCommand}" Margin="0,10,0,0"/>
        </StackPanel>

        <!-- Placeholder for Detail View -->
        <TextBlock Grid.Column="1" Text="Select a Correlation ID to view details." VerticalAlignment="Center" HorizontalAlignment="Center"/>
    </Grid>
</Window>










<Window x:Class="LogSearchApp.DetailPage"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Log Details" Height="450" Width="800">
    <Grid Margin="10">
        <DataGrid ItemsSource="{Binding LogEntries}" AutoGenerateColumns="False" IsReadOnly="True">
            <DataGrid.Columns>
                <DataGridTextColumn Header="DateTime" Binding="{Binding DateTime}" Width="*"/>
                <DataGridTextColumn Header="LogLevel" Binding="{Binding LogLevel}" Width="*"/>
                <DataGridTextColumn Header="CorrelationId" Binding="{Binding CorrelationId}" Width="*"/>
                <DataGridTextColumn Header="Message" Binding="{Binding Message}" Width="*"/>
                <DataGridTextColumn Header="LogFolderName" Binding="{Binding LogFolderName}" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
