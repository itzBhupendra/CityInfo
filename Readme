using NUnit.Framework;
using Moq;
using System;
using System.Threading.Tasks;

// Interface representing the API client
public interface IApiClient
{
    Task<string> GetDataFromApi();
}

// Service locator for dependency resolution
public static class ServiceLocator
{
    private static IApiClient _apiClient;

    public static IApiClient GetApiClient()
    {
        if (_apiClient == null)
        {
            // For testing, resolve the IApiClient with a mocked implementation
            _apiClient = GetMockedApiClient();
        }
        return _apiClient;
    }

    private static IApiClient GetMockedApiClient()
    {
        var apiClientMock = new Mock<IApiClient>();
        apiClientMock.Setup(client => client.GetDataFromApi())
                     .ReturnsAsync("Fake data from API");
        return apiClientMock.Object;
    }
}

[TestFixture]
public class ApiTests
{
    [Test]
    public async Task Test_ParentFunction()
    {
        // Resolve the IApiClient using the service locator
        var apiClient = ServiceLocator.GetApiClient();

        // Pass the resolved object to the test subject
        var classUnderTest = new ClassThatUsesApiClient();

        // Act - Call the parent function that internally uses the API client
        var result = await classUnderTest.ParentFunction();

        // Assert - Verify the result
        Assert.AreEqual("Fake data from API", result);
    }
}

// Example class that uses the API client
public class ClassThatUsesApiClient
{
    private readonly IApiClient _apiClient;

    public ClassThatUsesApiClient()
    {
        _apiClient = ServiceLocator.GetApiClient();
    }

    public async Task<string> ParentFunction()
    {
        // The parent function that internally calls GetDataFromApi()
        var data = await _apiClient.GetDataFromApi(); // API call made here
        // Perform some processing on the data...
        return data;
    }
}
