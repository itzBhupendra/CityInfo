using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography.X509Certificates;

class Program
{
    static void Main()
    {
        string certificateName = "YourCertificateName"; // Replace with your certificate's name
        var latestCertificate = GetLatestCertificate(certificateName);

        if (latestCertificate != null)
        {
            Console.WriteLine($"Latest Certificate Thumbprint: {latestCertificate.Thumbprint}");
        }
        else
        {
            Console.WriteLine("No certificate found.");
        }
    }

    static X509Certificate2 GetLatestCertificate(string certificateName)
    {
        using (X509Store store = new X509Store(StoreName.My, StoreLocation.LocalMachine))
        {
            store.Open(OpenFlags.ReadOnly);
            var certificates = store.Certificates.Cast<X509Certificate2>()
                .Where(cert => cert.Subject.Contains($"CN={certificateName}", StringComparison.OrdinalIgnoreCase));

            X509Certificate2 latestCert = null;
            DateTime latestInstallDate = DateTime.MinValue;

            foreach (var cert in certificates)
            {
                DateTime installDate = GetCertificateInstallDate(cert.Thumbprint);
                if (installDate > latestInstallDate)
                {
                    latestInstallDate = installDate;
                    latestCert = cert;
                }
            }

            return latestCert;
        }
    }

    static DateTime GetCertificateInstallDate(string thumbprint)
    {
        try
        {
            // Run certutil command to get installation date
            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "certutil",
                    Arguments = $"-store My {thumbprint}",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                }
            };

            process.Start();
            string output = process.StandardOutput.ReadToEnd();
            process.WaitForExit();

            // Parse the output for installation date
            string installDateLine = output.Split(Environment.NewLine)
                .FirstOrDefault(line => line.Contains("NotBefore", StringComparison.OrdinalIgnoreCase));

            if (installDateLine != null)
            {
                string dateStr = installDateLine.Split(new[] { "NotBefore:" }, StringSplitOptions.None)[1].Trim();
                return DateTime.Parse(dateStr);
            }
        }
        catch
        {
            // Handle exceptions (if any)
        }

        return DateTime.MinValue;
    }
}
