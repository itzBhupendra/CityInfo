import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import { CircularProgress, Container, Typography } from '@mui/material';

interface LogModel {
  AppName: string;
  CorrelationId: string;
  LogDateTime: string;  // ISO format assumed
  LogLevel: string;
  Message: string;
}

// URLs of the three servers
const serverUrls = [
  'https://server1.example.com/api/logs',
  'https://server2.example.com/api/logs',
  'https://server3.example.com/api/logs',
];

const LogDashboard: React.FC = () => {
  const [logs, setLogs] = useState<LogModel[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch logs from all servers
  const fetchLogs = async () => {
    setLoading(true);
    try {
      const responses = await Promise.all(serverUrls.map(url => axios.get<LogModel[]>(url)));
      
      // Combine all logs from each server's response
      const allLogs = responses.flatMap(response => response.data);
      
      // Sort logs by LogDateTime in descending order
      allLogs.sort((a, b) => new Date(b.LogDateTime).getTime() - new Date(a.LogDateTime).getTime());

      setLogs(allLogs);
    } catch (error) {
      console.error('Error fetching logs:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchLogs();
  }, []);

  // Define columns for the DataGrid
  const columns: GridColDef[] = [
    { field: 'AppName', headerName: 'App Name', width: 150 },
    { field: 'CorrelationId', headerName: 'Correlation ID', width: 200 },
    { field: 'LogDateTime', headerName: 'Date/Time', width: 180 },
    { field: 'LogLevel', headerName: 'Log Level', width: 120 },
    { field: 'Message', headerName: 'Message', width: 300 },
  ];

  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        Log Dashboard
      </Typography>
      
      {loading ? (
        <CircularProgress />
      ) : (
        <DataGrid
          rows={logs.map((log, index) => ({ id: index, ...log }))}
          columns={columns}
          pageSize={10}
          autoHeight
        />
      )}
    </Container>
  );
};

export default LogDashboard;
