using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.TestHost;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Moq;
using System;
using System.Net.Http;
using System.Threading.Tasks;
using Xunit;

public class MyControllerTests
{
    private readonly TestServer _server;
    private readonly HttpClient _client;
    private readonly Mock<IMyService> _mockService;
    private readonly Mock<IHttpContextAccessor> _mockHttpContextAccessor;

    public MyControllerTests()
    {
        _mockService = new Mock<IMyService>();
        _mockHttpContextAccessor = new Mock<IHttpContextAccessor>();

        var context = new DefaultHttpContext();
        _mockHttpContextAccessor.Setup(_ => _.HttpContext).Returns(context);

        var builder = new WebHostBuilder()
            .ConfigureServices(services =>
            {
                services.AddSingleton(_mockService.Object);
                services.AddSingleton(_mockHttpContextAccessor.Object);
                services.AddControllers();
                services.AddLogging();
            })
            .Configure(app =>
            {
                app.UseMiddleware<LoggingMiddleware>();
                app.UseMiddleware<ExceptionHandlingMiddleware>();
                app.UseRouting();
                app.UseEndpoints(endpoints =>
                {
                    endpoints.MapControllers();
                });
            });

        _server = new TestServer(builder);
        _client = _server.CreateClient();
    }

    [Fact]
    public async Task Get_WhenExceptionThrown_ReturnsInternalServerError()
    {
        // Arrange
        _mockService.Setup(service => service.GetById(It.IsAny<int>())).Throws(new Exception("Test exception"));

        // Act
        var response = await _client.GetAsync("/mycontroller/1");

        // Assert
        Assert.Equal(System.Net.HttpStatusCode.InternalServerError, response.StatusCode);
    }
}
