[HttpGet("aggregate-logs/{correlationId}")]
public async Task<IActionResult> GetLogsFromAllServers(string correlationId)
{
    var currentServerLogs = GetLogsByCorrelationIdLocal(correlationId); // Call to local logs

    var otherServerUrls = new List<string>
    {
        "http://server1/api/logs/",
        "http://server2/api/logs/",
        "http://server3/api/logs/"
    };

    // Remove the URL for the current server to avoid calling itself
    otherServerUrls.Remove($"http://{Request.Host}/api/logs/");

    var logEntries = new List<string>();

    // Add local logs
    logEntries.AddRange(currentServerLogs);

    using (var httpClient = new HttpClient())
    {
        // Fetch logs from the other servers
        var tasks = otherServerUrls.Select(async url =>
        {
            var response = await httpClient.GetAsync($"{url}{correlationId}");
            if (response.IsSuccessStatusCode)
            {
                var logs = await response.Content.ReadAsAsync<IEnumerable<string>>();
                logEntries.AddRange(logs);
            }
        });

        await Task.WhenAll(tasks); // Wait for all tasks to complete
    }

    return Ok(logEntries);
}

private IEnumerable<string> GetLogsByCorrelationIdLocal(string correlationId)
{
    var logFilePath = "path_to_log_file";  // Local log file location
    return System.IO.File.ReadLines(logFilePath)
        .Where(line => line.Contains(correlationId));
}
