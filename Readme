using Microsoft.Extensions.Logging;
using System;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

public static class LoggerExtensions
{
    public static IDisposable LogMethod(this ILogger logger,
        [CallerMemberName] string methodName = "")
    {
        return new LogMethodScope(logger, methodName);
    }

    private class LogMethodScope : IDisposable
    {
        private readonly ILogger _logger;
        private readonly string _methodName;
        private bool _disposed = false;

        public LogMethodScope(ILogger logger, string methodName)
        {
            _logger = logger;
            _methodName = methodName;
            _logger.LogInformation($"Starting function {_methodName} at {DateTime.UtcNow}");
        }

        public void Dispose()
        {
            if (!_disposed)
            {
                _disposed = true;
                _logger.LogInformation($"Ending function {_methodName} at {DateTime.UtcNow}");
            }
        }

        public void LogException(Exception ex)
        {
            _logger.LogError(ex, $"Exception in function {_methodName} at {DateTime.UtcNow}");
        }
    }
}
