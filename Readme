public class DatabaseLogger : ILogger
{
    private readonly ILogger _logger;

    public DatabaseLogger(ILogger logger)
    {
        _logger = logger;
    }

    public IDisposable BeginScope<TState>(TState state)
    {
        return _logger.BeginScope(state);
    }

    public bool IsEnabled(LogLevel logLevel)
    {
        return _logger.IsEnabled(logLevel);
    }

    public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    {
        // Implement database logging logic
        _logger.Log(logLevel, eventId, state, exception, formatter);
    }
}

public class FileLogger : ILogger
{
    private readonly ILogger _logger;

    public FileLogger(ILogger logger)
    {
        _logger = logger;
    }

    public IDisposable BeginScope<TState>(TState state)
    {
        return _logger.BeginScope(state);
    }

    public bool IsEnabled(LogLevel logLevel)
    {
        return _logger.IsEnabled(logLevel);
    }

    public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    {
        // Implement file logging logic
        _logger.Log(logLevel, eventId, state, exception, formatter);
    }
}
