using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;

public class AuthCacheFilter : ActionFilterAttribute
{
    private readonly AuthService _authService;

    public AuthCacheFilter(AuthService authService)
    {
        _authService = authService;
    }

    public override void OnActionExecuting(ActionExecutingContext context)
    {
        // Assuming UserID is passed in a header (or query string/body)
        var userId = context.HttpContext.Request.Headers["UserID"].FirstOrDefault();

        if (string.IsNullOrEmpty(userId))
        {
            // UserID is missing, return unauthorized
            context.Result = new UnauthorizedResult();
            return;
        }

        // Use the AuthService to authenticate and cache the user
        bool isAuthenticated = _authService.AuthenticateAndCacheUser(userId);

        if (!isAuthenticated)
        {
            // Authentication failed
            context.Result = new UnauthorizedResult();
        }

        // If authentication succeeds, proceed to the action
        base.OnActionExecuting(context);
    }
}
