using System;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

class Program
{
    static void Main(string[] args)
    {
        // Specify the certificate subject name you're looking for
        string certName = "Your Certificate Name";  // Update this to the certificate's common name

        // Define the store locations to search for the certificate
        StoreLocation[] storeLocations = { StoreLocation.CurrentUser, StoreLocation.LocalMachine };

        // Define the store name to search in (typically 'My' for personal certificates)
        StoreName storeName = StoreName.My;

        foreach (var storeLocation in storeLocations)
        {
            using (X509Store store = new X509Store(storeName, storeLocation))
            {
                try
                {
                    store.Open(OpenFlags.ReadOnly);

                    // Find the certificate by its name
                    X509Certificate2Collection certCollection = store.Certificates.Find(
                        X509FindType.FindBySubjectName, certName, validOnly: false);

                    // Check if any certificates were found
                    if (certCollection.Count > 0)
                    {
                        // Get the first matching certificate
                        X509Certificate2 cert = certCollection[0];

                        Console.WriteLine("Certificate found:");
                        Console.WriteLine("  Subject: " + cert.Subject);
                        Console.WriteLine("  Issuer: " + cert.Issuer);
                        Console.WriteLine("  Thumbprint: " + cert.Thumbprint);

                        // Check if the certificate has a private key
                        if (cert.HasPrivateKey)
                        {
                            // Extract the private key
                            RSA rsaPrivateKey = cert.GetRSAPrivateKey();

                            if (rsaPrivateKey != null)
                            {
                                // Export the private key to XML format (true for including private parameters)
                                string privateKeyXml = rsaPrivateKey.ToXmlString(true);
                                Console.WriteLine("Private Key XML:");
                                Console.WriteLine(privateKeyXml);
                            }
                            else
                            {
                                Console.WriteLine("RSA Private Key is null.");
                            }
                        }
                        else
                        {
                            Console.WriteLine("Certificate does not have a private key.");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"No certificate found with the name: {certName}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error accessing store: {ex.Message}");
                }
                finally
                {
                    store.Close();
                }
            }
        }
    }
}
