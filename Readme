using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.AspNetCore.TestHost;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;

namespace YourNamespace.Tests
{
    [TestClass]
    public class MyControllerTests
    {
        private static WebApplicationFactory<Program> _factory;
        private static HttpClient _client;

        [ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
            _factory = new WebApplicationFactory<Program>()
                .WithWebHostBuilder(builder =>
                {
                    builder.ConfigureServices(services =>
                    {
                        // Register controllers and other services for testing
                        services.AddControllers();
                        services.AddSingleton<IMyService, MyService>();
                        services.AddHttpContextAccessor();
                    });

                    builder.Configure(app =>
                    {
                        app.UseMiddleware<ExceptionMiddleware>(); // Ensure the Exception Middleware is added

                        app.UseRouting();
                        app.UseAuthorization();
                        app.UseEndpoints(endpoints =>
                        {
                            endpoints.MapControllers();
                        });
                    });
                });

            _client = _factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                BaseAddress = new Uri("http://localhost")
            });
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
            _client.Dispose();
            _factory.Dispose();
        }

        [TestMethod]
        public async Task Get_WhenExceptionThrown_ReturnsInternalServerError()
        {
            // Act
            var response = await _client.GetAsync("/MyController/1"); // Ensure the path is correct

            // Assert
            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode);

            var content = await response.Content.ReadAsStringAsync();
            Assert.IsTrue(content.Contains("Internal Server Error from the custom middleware."));
        }

        [TestMethod]
        public void VerifyControllerRegistration()
        {
            // Arrange
            var endpointDataSource = _factory.Services.GetRequiredService<EndpointDataSource>();

            // Act
            var controllerEndpoints = endpointDataSource.Endpoints
                .Where(e => e.Metadata.GetMetadata<ControllerActionDescriptor>() != null)
                .ToList();

            // Assert
            Assert.IsTrue(controllerEndpoints.Count > 0);
        }
    }
}
