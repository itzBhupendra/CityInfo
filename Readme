using System;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;

public class DatabaseHelper
{
    private static readonly int MaxRetryAttempts = 3;
    private static readonly int DelayBetweenRetries = 2000; // in milliseconds

    public static async Task<T> ExecuteWithRetryAsync<T>(Func<DbConnection, Task<T>> dbOperation)
    {
        int attempt = 0;
        bool success = false;

        while (attempt < MaxRetryAttempts && !success)
        {
            try
            {
                using (var connection = dbprovider.CreateConnection())
                {
                    await connection.OpenAsync();
                    T result = await dbOperation(connection);
                    success = true;
                    return result; // If we reach here, the operation was successful
                }
            }
            catch (Exception ex)
            {
                attempt++;
                if (attempt >= MaxRetryAttempts)
                {
                    Console.WriteLine("Failed to complete the operation after multiple attempts.");
                    throw;
                }
                else
                {
                    Console.WriteLine($"Operation failed. Attempt {attempt} of {MaxRetryAttempts}. Retrying in {DelayBetweenRetries / 1000} seconds...");
                    await Task.Delay(DelayBetweenRetries);
                }
            }
        }

        throw new InvalidOperationException("Unexpected exit from retry loop.");
    }
}
